Public Pages (formerly known as Hosted Pages) are highly customizable white label pages that you can use as the public-facing side of your subscription business. They are a quick and easy way to integrate with the Chargify platform without having to worry about collecting credit card information or writing custom code yourself.

There are two types of Public Pages available to merchants in all Chargify plans:

* **Public Signup Pages** must be individually created by the merchant in the admin UI and allow new subscriptions to be created for any of your current active products.
* **Self-Service Pages** are automatically created for each active subscription and allow the customer to manage payment methods.

If you need information on configuring the look, feel, and behavior of your Public Page, please see "Public Page Default Settings":/public-page-default-settings.

p(warning). Accessing *any* Public Page will log you out of your Chargify account.  This is necessary for security reasons.  If you would like to test your Public Pages without being logged out, please copy the links and open them in another browser or in a private browser window.

h2. Public Signup Pages

!https://s3.amazonaws.com/entp-tender-production/assets/0a600c477a13047b5aea02209285bb734b7de98a/screenshot_normal.jpg!

Each Product can have multiple Public Signup Pages, each with its own unique URL. To get started on using Public Signup Pages, click the "Setup" tab and then the "Public Signup Pages" menu item right under it.

!/images/doculab/public_pages_01.png!:/images/doculab/public_pages_01.png

You can get the URL for a specific Public Signup Page attached to a Chargify Product by viewing the list of Public Signup Pages located in that same page:

!/images/doculab/public_pages_04.png!:/images/doculab/public_pages_04.png

If you need information on how to create your first Public Signup Page or how to customize your Public Signup Pages, please see "Public Signup Page Settings":/public-signup-page-settings.

p(warning). To use Public Signup Pages with the Beanstream gateway, you *must* enable billing address collection from within the "Public Signup Page Settings":/public-signup-page-settings.

h3. Public Signup Page Flow

# Provide your potential Customers with a link to the Public Signup Page for the Product you would like to offer them.  Note that you have the option to pass in some data to pre-populate the form or variables that are sent to Chargify - see "Public Page Default Settings: Pre-populating Data":/public-page-default-settings#pre-populating-data
# The customer fills out their credit card details and other requested or required information (the information collected by the Public Signup Page is controlled by the "Public Page Default Settings":/public-page-default-settings) and presses the submit button
## If the customer enters information incorrectly or their credit card is declined, they are notified within the Public Signup Page and given a chance to make corrections
## If the customer enters information correctly and their credit card is accepted (or is not required) then they are redirected either to:
### a Subscription Receipt Page
### the page identified by the Return URL you provided in the "Public Signup Page Settings":/public-signup-page-settings
# If you use a Return URL and Return URL parameters, you can capture information about the signup within your Return URL page to change your own application state (however you'll probably want to verify this information via our API to avoid susceptibility to URL-hacking).  The Return URL and Return URL parameters are how you can be *synchronously* notified of a signup.  This is the best way to learn about a new subscription via the Public Signup Page in real time.
# You can also observe "Webhooks":/webhooks to change your application state based on the signup.  Webhooks are *asynchronous* events, so you probably do not want to block your user from completing a signup on your end until you receive the Webhook.  See "Webhooks are Asynchronous":/webhooks#asynchronous

<!-- TODO: document flow for card updates via hosted pages -->

h2. Self-Service Pages

!/images/doculab/public_pages_02.png!:/images/doculab/public_pages_02.png

Every Chargify Subscription gets an automatically generated URL for a Self-Service Page that will only allow changes to that specific subscription. To get the URL for the Self-Service Page attached to any given Subscription, visit the Subscription index page by clicking the "Subscriptions" tab in the admin UI. You'll find the link to the Subscription's Self-Service Page inside the actions menu in each table row.

!/images/doculab/public_pages_03.png!:/images/doculab/public_pages_03.png

h3(#self-service-page-urls). Self-Service Page URLs

If you choose to use the Self-Service Pages, you can programmatically generate some of the URLs for the pages so that you may easily embed the links within your own site or emails.

The pages that are (or will be) accessible via generated URLs are as follows:

|_. Page          |_. Shortname     |_. Resource    |_. URI |
| Signup          | Coming soon...  | Product       | (can be obtained from UI, as described above) |
| Update Payment  | update_payment  | Subscription  | @/update_payment/[subscription.id]/[token]@ |

h4. Obtaining your Shared Key

A Shared Key, that is known only to you and Chargify, is used to generate and validate the Self-Service Page URLs.  This allows you to create URLs that are "unguessable".  However, anyone with the URL will be able to visit the page.  If you require a stronger authorization scheme, you should not distribute URLs for the Self-Service Pages, and instead use our API to integrate your app with Chargify.

Every Chargify Site has a unique Shared Key.  You may obtain your key by visiting the "Settings" tab for the Site in which your are interested:

!https://s3.amazonaws.com/entp-tender-production/assets/be063a896189b9fd3aa52991ff6e56db6e759eb8/_Chargify__Acme__Inc.___Your_Sites_normal.png!

The Shared Key is shown in the section titled "Public Page URLs":

!https://s3.amazonaws.com/entp-tender-production/assets/aa9f8e29e9f196278673f342c1e5c3ff303621e6/_Chargify__Acme__Inc.___My_Site___Settings_normal.png!


h4. Generating Tokens

URLs are constructed, and later verified, via a secret token.  This token is the first 10 characters of the "SHA-1":http://en.wikipedia.org/wiki/SHA-1 hex digest of a specially constructed message.  In pseudo-code:

<pre><code>token = SHA1(message)[0..9]
</code></pre>

The message is a concatenation of the page "shortname", the resource's ID, and the Site's Shared Key. The message parts are joined using double dashes (--). Consider the Self-Service Page for a subscription with ID '77' and a Shared Key of '1234':

<pre><code>message = "update_payment--77--1234"
</code></pre>

Putting it all together:

<pre><code>token = SHA1("update_payment--77--1234")[0..9]
# => b59a09cc72
</code></pre>


h3. Generating URLs

URLs follow the pattern:

<pre><code>https://[subdomain].chargify.com/[shortname]/[id]/[token]
</code></pre>

So, a full URL for the Self-Service Page on the `acme` subdomain, using the values from the earlier example, would be:

<pre><code>https://acme.chargify.com/update_payment/77/b59a09cc72
</code></pre>

h4. Resource IDs

The required value for [id] in the URL is available via the `id` parameter in a response from our API.  This ID is a unique value assigned to resources by Chargify.

h4. Token Length

You may pass a token that is longer than 10 characters; however, we only verify that the first 10 characters of your token match the expected token.

h4. Pretty IDs

You may pass more information in the [id] parameter, as long as that information is proceeded by a dash (-).  For example, the following two URLs access the same payment update page:

<pre><code>
https://acme.chargify.com/update_payment/77/b59a09cc72
https://acme.chargify.com/update_payment/77-john-doe/b59a09cc72
</code></pre>

In this example, we're adding the customers name to the subscription ID, making it more "personal".  Just make sure that anything you add to the URL is in fact composed of URL-safe characters.

h4. URL Validity

A "404 Not Found" response will be returned if the URL is not valid.  Invalid URLs can result from either of the following:

* The resource ID does not identify a valid resource for the given Site
* The token does not match the expected token for the page shortname and ID
* Using POST instead of the correct GET verb to initially request the Self-Service Page

h2(#translations). Public Page Translations/Internationalization (i18n)

The Public Pages are only offered in English at this time.  If you would like to add translations to page content, you may do so by writing Javascript that replaces on-page content with your own content via Custom Javascript.  Adding Custom Javascript is documented in "Public Page Settings":/public-page-settings.

h3. Translating Javascript Generated Content

Even though you can translate on-page content by replacing text on the page, there is still an issue where you will not have access to content that we generate via Javascript and add to the page later.  Examples of this kind of content are:

* The alert box that pops up when the Terms & Conditions are not acknowledged
* The label on the submit button that changes as a result of a click (i.e. from "Submit" to "Processing...")

We have provided a mechanism for you to add translations for this javascript-generated content.  To your Custom Javascript, you may add translations by extending `chargifyHostedPageDictionary`.

<pre><code>$.extend(chargifyHostedPageDictionary, {
  // The alert pop up when agreement to terms is required but not checked:
  'alert.must-agree-to-terms':         'You must agree to the Terms and Conditions',

  // The default value for the Billing/Shipping State selector after choosing a new country:
  'form.address-state.blank-label':    'Please select',

  // The replacement value for the submit button text once it is clicked:
  'form.submit-button.disabled-label': 'Processing...'
});</code></pre>

Shown above is the default text from our default dictionary.  If I wanted to translate the content to another language, say "Pirate", I could:

<pre><code>$.extend(chargifyHostedPageDictionary, {
  "alert.must-agree-to-terms": "Arr matey, agree to mine terms or walk the plank",
  'form.address-state.blank-label':    'Select yer state, swashbuckler',
  'form.submit-button.disabled-label': 'Shiver your timbers...'
});</code></pre>
